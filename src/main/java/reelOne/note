Java是一个完整的平台，有一个庞大的库，其中包含了很多可重用的代码和一个提供诸如安全性、跨操作系统的可移植性以及自动垃圾收集等服务的执行环境。


Java“白皮书”的关键术语
Java的设计者已经编写了颇有影响力的“白皮书”，用来解释设计的初衷以及完成的情况，并且发布了一个简短的摘要。这个摘要用下面11个关键术语进行组织:
1)简单性
2）面向对象
3）分布式
4）健壮性
5）安全性
6)体系结构中立
7）可移植性
8）解释型
9）高性能
10）多线程
11）动态性



1)简单性
剔除了 C++ 中许多很少使用、 难以理解、 易混淆的特性
没有头文件、 指针运算（甚至指针语法、) 结构、 联合、 操作符重载、 虚基类等



2）面向对象
它将重点放在教椐 （ 即对象）和对象的接口上。
Java与 C++ 的主要不同点在于多重继承，在 Java 中，取而代之的是更简单的接口概念更丰富的运行时自省功能



3）分布式?
Java 有一个丰富的例程库，用于处理像 HTTP 和 FIT 之类的 TCP/IP 协议。Java 应用程序能够通过 URL 打开和访问网络上的对象，其便捷程度就好像访问本地文件一样。



4）健壮性
Java 编写的程序具有多方面的可靠性
进行早期的问题检测、 后期动态的 （运行时）检测，并消除了容易出错的情况
Java 采用的指针模型可以消除重写内存和损坏数据的可能性。



5）安全性
Java 的安全模型很复杂。
Java 适用于网络 / 分布式环境。 为了达到这个目标，在安全方面投入了很大精力。使用 Java 可以构建防病毒、 防篡改的系统。
•运行时堆栈溢出。 如蠕虫和病毒常用的攻击手段。
•破坏自己的进程空间之外的内存。
•未经授权读写文件。
不可信代码在一个沙箱环境中执行，在这里它不会影响主系统用户可以确信不会发生不好的事情， 因为 Java 代码不论来自哪里，都不能脱离沙箱。
Java 虚拟机还有一些其他的优点。它可以检测指令序列的行为， 从而增强其安全性。



6)体系结构中立
编译器生成一个体系结构中立的目标文件格式，这是一种编译过的代码， 只要有Java 运行时系统， 这些编译后的代码可以在许多处理器上运行。
Java 编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。
精心设计的字节码不仅可以很容易地在任何机器上解释执行，而且还可以动态地翻译成本地机器代码
解释虚拟机指令肯定会比全速运行机器指令慢很多。 然而， 虚拟机有一个选项，可以将执行最频繁的字节码序列翻译成机器码，这一过程被称为即时编译



7）可移植性
与 C 和 C++ 不同，Java 规范中没有“ 依赖具体实现” 的地方基本教据类型的大小以及有关运算都做了明确的说明
Java 中的 int 永远为 32 位的整数而在 C/C++ 中， int 可能是 16 位整数、 32 位整数， 也可能是编译器提供商指定的其他大小。
唯一的限制只是 int 类型的大小不能低于 short int, 并且不能高于 long int。
在 Java 中，数据类型具有固定的大小， 这消除了代码移植时令人头痛的主要问题。
二进制数据以固定的格式进行存储和传输， 消除了字节顺序的困扰。
字符串是用标准的 Unicode 格式存储的。
作为系统组成部分的类库， 定义了可移植的接口例如，有一个抽象的 Window类， 并给出了在 UNIX、 Windows 和 Macintosh 环境下的不同实现。
除了与用户界面有关的部分外，所有其他 Java 库都能很好地支持平台独立性。
你可以处理文件、 正则表达式、 XML、 日期和时间、 数据库、 网络连接、 线程等，而不用操心底层操作系统。



8）解释型
Java 解释器可以在任何移植了解释器的机器上执行 Java 字节码。
由于链接是一个增量式且轻量级的过程， 所以， 开发过程也变得更加快捷，更加具有探索性。



9）高性能
尽管对解释后的字节码性能已经比较满意，但在有些场合下还需要更加高效的性能。
字节码可以（在运行时刻）动态地翻译成对应运行这个应用的特定 CPU 的机器码。
【即时编译器】
可以监控经常执行哪些代码并优化这些代码以提高速度。
更为复杂的优化是消除函数调用（即“ 内联”）。
知道哪些类已经加载= 基于当前加载的类集， 如果特定的函数不会被覆盖，就可以使用内联。必要时，还可以撤销优化。



10）多线程
多线程可以带来更好的交互响应和实时行为。
因为摩尔定律行将完结。我们不再追求更快的处理器，而是着眼于获得更多的处理器，而且要让它们一直保持工作。
是第一个支持并发程序设计的主流语言



11）动态性
从各种角度看， Java 与 C 或 C++ 相比更加具有动态性。
它能够适应不断发展的环境库中可以自由地添加新方法和实例变量， 而对客户端却没有任何影响。
Java 中找出运行时类型信息十分简单。
Java 设计者很清楚动态语言可以很容易地实现运行程序的演进。
最终，他们将这一特性引入这个主流程序设计语言中。





1.3 Java applet 与 Internet-略





1.4 Java 发展简史
Java 的历史要追溯到 1991 年，由 Patrick Naughton 和 James Gosling (一个全能的计算机奇才）
带领的 Sun 公司的工程师小组想要设计一种小型的计算机语言， 主要用于像有线电视转换盒这类的消费设备。
由于这些消费设备的处理能力和内存都很有限， 所以语言必须非常小且能够生成非常紧凑的代码。
另外， 由于不同的厂商会选择不同的中央处理器（ CPU), 因此这种语言的关键是不与任何特定的体系结构捆绑在一起。
这个项目被命名为“ Green”
代码短小、 紧凑且与平台无关， 这些要求促使开发团队设计一个可移植的语言， 可以为虚拟机生成中间代码。
Gosling 在专访中谈到的：“ 毕竟，语言只是实现目标的工具，而不是目标本身”
Gosling 把这种语言称为“ Oak ”（这么起名的原因大概是因为他非常喜欢自己办公室外的橡树)。
版本  年份   特性   类/接口数量
1.0  1996   语言本身  211
1.1  1997   内部类    477
1.2  1998   strictfp修饰符  1524
1.3  2000   无        1840
1.4  2002   断言      2723
5.0  2004   泛型,forEach,可变元参数,自动装箱,元数据,枚举,静态导入,  3279
6    2006   无        3793
7    2001   基于字符串的switch，钻石操作符,二进制字面量,异常处理器改进  4024
8    2014   lambda表达式,包含默认方法接口,流和日期/时间库





1 . 5 关 于 Java 的常见误解
1. Java 是 HTML 的扩展
Java 是一种程序设计语言；HTML 是一种描述网页结构的方式。除了用于在网页上放置
Java applet 的 HTML 扩展之外，两者没有任何共同之处。

2. 使用 XML, 所以不需要 Java
Java 是一种程序设计语言；XML 是一种描述数据的方式。可以使用任何一种程序设计
语言处理 XML 数据，而 Java API 对 XML 处理提供了很好的支持。此外，许多重要的第三
方 XML 工具采用 Java 编写。有

3.Java 是一种非常容易学习的程序设计语言
像 Java 这种功能强大的语言大都不太容易学习。
首先，必须将编写玩具式程序的轻松和开发实际项目的艰难区分开来。
Java 类库包含了数千种类和接口以及数万个函数。
幸运的是，并不需要知道它们中的每一个，然而， 要想 Java 解决实际问题， 还是需要了解不少内容的。

4.Java 将成为适用于所有平台的通用性编程语言
从理论上讲， 有可能的。
浏览器中的处理几乎完全由 JavaScript 掌控。
Java 在服务器端编程和跨平台客户端应用领域则很有优势

5. Java 只不过是另外一种程序设计语言
程序设计语言的成功更多地取决于其支撑系统的能力， 而不是优美的语法
人们主要关注：
是否提供了易于实现某些功能的易用、 便捷和标准的库？
是否有开发工具提供商能建立强大的编程和调试环境？
语言和工具集是否能够与其他计算基础架构整合在一起？
Java 的成功源于其类库能够让人们轻松地完成原本有一定难度的事情。
联网Web 应用和并发。Java 减少了指针错误， 这是一个额外的好处， 因此使用 Java 编程的效率更高。

7. Java 是解释型的， 因此对于关键的应用程序速度太慢了
早期的 Java 是解释型的。
 现在 Java 虚拟机使用了即时编译器， 因此采用 Java 编写的“ 热点” 代码其运行速度与 C++ 相差无几， 有些情况下甚至更快。
今天的计算机速度远比人们发出抱怨的时候快了很多
一个较慢的 Java 程序与几年前相当快的 C++ 程序相比还要快一些。

8. 所有的 Java 程序都是在网页中运行的
所有的 Java applet 都是在网页浏览器中运行的。这也恰恰是 applet 的定义，即一种在浏览器中运行的 Java 程序
然而，大多数 Java 程序是运行在 Web 浏览器之外的独立应用程序。
实际上， 很多 Java 程序都在 Web 服务器上运行并生成用于网页的代码。

9 Java 程序是主要的安全风险
有些系统管理员甚至在公司浏览器中禁用了 Java, 而同时却允许用户下载可执行文件和Word 文档，
针对 Windows 可执行文件和 Word 宏有数百万种病毒攻击
尽管距离 Java 诞生已经 20 年之久，与其他常用的执行平台相比，Java 还是安全得多。

10. JavaScript 是 Java 的简易版
JavaScript 是一种在网页中使用的脚本语言，它是由 Netscape 发明的，
原来的名字叫做LiveScript。JavaScript 的语法类似 Java,除此之外，两者无任何关系。
JavaScript 紧密地与浏览器集成在一起。特别是 JavaScript 程序可以修改正在显示的文档，

11使用 Java 可以用廉价的 Internet 设备取代桌面计算机
用户还不打算放弃功能强大而便利的桌面计算机， 而去使用没有本地存储而且功能有限的网络设备。、
这些设备大多使用安卓平台，这是 Java 的衍生产物。
学习Java 编程肯定也对 Android 编程很有帮助。