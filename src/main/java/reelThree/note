第 3章 Java 的基本程序设计结构

3.1 一个简单的 Java 应用程序
这里， 只需要将类作为一个加载程序逻辑的容器，程序逻辑定义了应用程序的行为
3 . 2 注 释


------------------


3 . 3 数 据 类 型
Java 是 -种强类型语言。这就意味着必须为每一个变量声明一种类型:
在 Java 中，共有 8种基本类型（ primitive type ),
其中有 4 种整型、2 种浮点类型、 1 种用于表示 Unicode 编码的字符单元的字符类型 char  和 1 种用于表示真值的 boolean 类型。

3 . 3.1 整型
整型用于表示没有小数部分的数值， 它允许是负数
byte  1字节    （-128）----（128）
short 2字节    （-32768）----（32767）
int   4字节    （-21483648）----（21483648）
long  8字节     （-9233372036854775808）----（9233372036854775808）
byte 和 short 类型主要用于特定的应用场合，
例如，底层的文件处理或者需要控制占用存储空间量的大数组。
=======
长整型数值有一个后缀 L 或 1 ( 如 4000000000L。) 十六进制数值有一个前缀 Ox 或 0X (如OxCAFEL 八进制有一个前缀 0 , 例如， 010 对应八进制中的 8。
很显然， 八进制表示法比较容易混淆， 所以建议最好不要使用八进制常数。
在 Java 中， 整型的范围与运行 Java 代码的机器无关。这就解决了软件从一个平台移植到另一个平台，或者在同一个平台中的不同操作系统之间进行移植给程序员带来的诸多问题
从 Java 7 开始， 加上前缀 0b 或 0B 就可以写二进制数。例如，OblOO丨就是 9。
另外，同样是从 Java 7 开始，还可以为数字字面量加下划线，如用 1_000_000(或 0b1111_0110_0010_0100_0000)
表示一百万。这些下划线只是为了让人更易读。Java 编译器会去除这些下划线

3.3.3 char 类型
char 类型原本用于表示单个字符。有些 Unicode字符可以用一个 char值描述，另外一些 Unicode 字符则需要两个 char 值。
char 类型的值可以表示为十六进制值，其范围从 \u0000 到 \Uffff。
例如：W2122 表示注册符号 ( ), \u03C0 表示希腊字母 it。
(转义序列？)

3.3.4 Unicode 和 char 类型
Unicode 打破了传统字符编码机制的限制。
在 1991 年发布了 Unicode 1.0, 当时仅占用 65 536 个代码值中不到一半的部分。
在设计 Java 时决定采用 16 位的 Unicode 字符集，这样会比使用 8 位字符集的程序设计语言有很大的改进。
了。Unicode 字符超过了 65 536 个，其主要原因是增加了大量的汉语、 日语和韩语中的表意文字。
现在，16 位的 char 类型已经不能满足描述所有 Unicode 字符的需要了。
======
Java SE 5.0 开始。码点（ code point) 是指与一个编码表中的某个字符对应的代码值。
在 Unicode 标准中，码点采用十六进制书写，并加上前缀 U+, 例如 U+0041 就是拉丁字母 A 的码点。
Unicode 的码点可以分成 17 个代码级别（ codeplane)。第一个代码级别称为基本的多语言级别（ basicmultilingual plane ),
码点从 U+0000 到 U+FFFF, 其中包括经典的 Unicode 代码；
其余的 16个级别码点从 U+10000 到 U+10FFFF , 其中包括一些辅助字符（supplementary character)。
UTF-16 编码采用不同长度的编码表示所有 Unicode 码点。在基本的多语言级别中，每个字符用 16 位表示，通常被称为代码单元（ code unit);
而辅助字符采用一对连续的代码单元进行编码。这样构成的编码值落人基本的多语言级别中空闲的 2048 字节内，
通常被称为替代区域（surrogate area) [ U+D800 ~ U+DBFF 用于第一个代码单兀，U+DC00 ~ U+DFFF 用于第二个代码单元 ]。
======
在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单兀。
我们强烈建议不要在程序中使用 char 类型，除非确实需要处理 UTF-16 代码单元。最好将字符串作为抽象数据类型处理

3.3.5 boolean 类型
boolean (布尔）类型有两个值：false 和 true, 用来判定逻辑条件 整型值和布尔值之间不能进行相互转换。


------------------------------------------------------


3 . 4 变 量-

3.4.1 变量初始化
声明一个变量之后，必须用赋值语句对变量进行显式初始化， 千万不要使用未初始化的变量。例如， Java 编译器认为下面的语句序列是错误的：

3.4.2 常量
关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上,常量名使用全大写。


------------------------------------------------------


3 . 5 运 算 符
当参与 / 运算的两个操作数都是整数时，否则， 表示浮点除法。
整数的求余操作（有时称为取模)用 ％ 表示。例如，15/2 等于 ，7 15%2 等于 1 , 15.0/2 等于 7.50
需要注意， 整数被 0 除将会产生一个异常， 而浮点数被 0 除将会得到无穷大或 NaN 结果。
======
Java 虚拟机的最初规范规定所有的中间计算都必须进行截断这种行为遭到了数值计算团体的反对。
截断计算不仅可能导致溢出， 而且由于截断操作需要消耗时间， 所以在计算速度上实际上要比精确计算慢。
由此-虚拟机设计者允许对中间计算结果采用扩展的精度。
但是， 对于使用 strictfj) 关键字标记的方法必须使用严格的浮点计算来生成可再生的结果

3.5.1 数学函数与常量
在 Math类中，包含了各种各样的数学函数。在编写不同类别的程序时，可能需要的函数也不同。
-数值的平方根， 可以使用 sqrt 方法
-幂运算， 因此需要借助于 Math 类的 pow 方法
-floorMod 方法的目的是解决一个长期存在的有关整数余数的问题。

3.5.2 数值类型之间的转换-
3.5.3 强制类型转换-
3.5.4 结合赋值和运算符
X += 4;  等价于  x = x + 4;

3.5.5 自增与自减运算符
还有一种“ 前缀” 形式：++n。后缀和前缀形式都会使变量值加 1 或减 1。
但用在表达式中时，二者就有区别了。前缀形式会先完成加 1; 而后缀形式会使用变量原来的值。

3.5.6 关系和 boolean 运算符-
3.5.7 位运算符(?)
处理整型类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码
技术得到整数中的各个位。位运算符包括：
& ("and") | ("or") A ("xor") ~ ("not")
这些运算符按位模式处理。

3.5.8 括号与运算符级别
如果不使用圆括号， 就按照给出的运算符优先级次序进行计算。

3 . 5.9 枚举类型
有时候，变量的取值只在一个有限的集合内。针对这种情况， 可以自定义枚举类型。枚举类型包括有限个命名的值。
enum Size { SMALL, MEDIUM, LARGE, EXTRA.LARCE };
现在，可以声明这种类型的变量：Size s = Size.MEDIUM;


------------------------------------------------------


3 . 6 字 符 串
从概念上讲， Java 字符串就是 Unicode 字符序列。
例如， 串“ Java\u2122” 由 5 个Unicode 字符 J、a、 v、a 和™
Java 没有内置的字符串类型， 而是在标准 Java 类库中提供了 一个预定义类，很自然地叫做 String。
每个用双引号括起来的字符串都是 String类的一个实例：

3 . 6.1 子串
String 类的 substring 方法可以从一个较大的字符串提取出一个子串

3.6.2 拼接
拼接与绝大多数的程序设计语言一样，Java语言允许使用 + 号连接（拼接）两个字符串。

3.6.3 不可?字符串
由于不能修改 Java 字符串中的字符， 所以在 Java 文档中将 String 类对象称为不可变字符串，
======
如同数字 3 永远是数字 3一样，字符串“ Hello” 永远包含字符 H、 e、1、 1 和 o 的代码单元序列， 而不能修改其中的任何一个字符。
不可变字符串却有一个优点：编译器可以让字符串共享
======
将各种字符串存放在公共的存储池中。字符串变量指向存储池中相应的位置。
如果复制一个字符串变量， 原始字符串与复制的字符串共享相同的字符。
======
Java 的设计者认为共享带来的高效率远远胜过于提取、 拼接字符串所带来的低效率。

3.6.5空 串 与Null
空串 "" 是长度为 0 的字符串。null, 这表示目前没有任何对象与该变量关联

3.6.6 码点与代码单元
Java 字符串由 char 值序列组成。从 3.3.3 节“ char 类型” 已经看到，
char 数据类型是一个采用 UTF-16 编码表示 Unicode 码点的代码单元。
大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。

3.6.7 String API-
3 . 6.8 阅读联机 API 文档-

3 . 6.9 构 建 字 符 串
例如， 按键或来自文件中的单词。采用字符串连接的方式达到此目的效率比较低。
【每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。】
使用 StringBuildei•类就可以避免这个问题的发生。
【如果需要用许多小段的字符串构建一个字符串】构建一个空的字符串构建器：
StringBuilder builder = new StringBuilderO;

------------------------------------------------------

3.7 输入输出（控制台-scanner）
为了增加后面示例程序的趣味性，需要程序能够接收输入，并以适当的格式输出。当
然， 现代的程序都使用 GUI 收集用户的输人， 然而，编写这种界面的程序需要使用较多的工
具与技术，目前还不具备这些条件。主要原因是需要熟悉 Java 程序设计语言，因此只要有简
单的用于输入输出的控制台就可以了。第 10 章 ~ 第 12 章将详细地介绍 GUI 程序设计。

3.7.1 读取输入
3.7.2 格式化输出

3.7.3 文件输入与输出
要想对文件进行读取，就需要一个用 File 对象构造一个 Scanner 对象，如下所示：
Scanner in = new Scanner(Paths.get("niyflle.txt"),"UTF-8");

3.8.1 块作用域
在深入学习控制结构之前， 需要了解块（block) 的概念。
块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句。块确定了变量的作用域。一个块可以嵌套在另一个块中。

3.8.2 条件语句-
3 . 8.3 循 环(do/while)-
3 . 8.4 确 定 循 环(for)-
3.8.5 多重选择：switch 语句-

3.8.6 中断控制流程语句   -break -continue


------------------------------------------------------


3 . 9 大 数 值
如果基本的整数和浮点数精度不能够满足需求， 那么可以使用jaVa.math 包中的两个很有用的类：
Biglnteger 和 BigDecimaL 这两个类可以处理包含任意长度数字序列的数值。
Biglnteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。


------------------------------------------------------


3 . 10 数组
数组是一种数据结构， 用来存储同一类型值的集合。通过一个整型下标可以访问数组中的每一个值。

3.10.1 for each 循环
Java 有一种功能很强的循环结构， 可以用来依次处理数组中的每个元素（其他类型的元素集合亦可）而不必为指定下标值而分心。
for (variable : collection) statement

3.10.2 数组初始化以及匿名数组
int[] small Primes = { 2, 3, 5, 7, 11, 13 };
new intD { 17, 19, 23, 29, 31, 37 }

3.10.3 数组拷贝
在 Java 中，允许将一个数组变量拷贝给另一个数组变量。这时， 两个变量将引用同一个数组：
如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 Arrays 类的 copyOf方法：
int[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers , luckyNumbers .length);
Java 数组与 C++ 数组在堆栈上有很大不同， 但基本上与分配在堆（heap) 上的数组指针一样

3.10.4 命令行参数
每一个 Java 应用程序都有一个带 String arg[]参数的 main 方法。
这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数3

3.10.5 数组排序
要想对数值型数组进行排序， 可以使用Arrays 类中的 sort 方法：[采用优化的快速排序算法对数组进行排序。]
binarySearch(type[]a, int start, int end, type v) [采用二分搜索算法]


3 . 1 0.6 多维数组
多维数组将使用多个下标访问数组元素， 它适用于表示表格或更加复杂的排列形式

假设需要建立一个数值表， 用来显示在不同利率下投资 $10,000 会增长多少，利息每年兑现， 而且又被用于投资
10%              11%            12%            13%            14%
10000.00         12000.00       12000.00       15000.00       25000.00
11000.00         13000.00       13500.00       16000.00       35000.00
121000.00        13500.00       14000.00       19000.00       45000.00
可以使川一个二维数组（也称为矩阵） 存储这些信息。这个数组被命名为 balances。

double[][] balances;
balances = new double[NYEARS] [NRATES]:
balances =
    {
    {16, 3, 2, 13}，
    {5, 10, 11, 8},
    (9, 6, 7, 12},
    {4, 15, 14, 1}
    }；

3.10.7 不规则数组
Java 实际上没有多维数组，只有一维数组。多维数组被解释为“ 数组的数组。
